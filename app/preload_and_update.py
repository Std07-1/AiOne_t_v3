# periodic_prefilter_and_update.py
import logging
import asyncio
import pandas as pd
from stage1.optimized_asset_filter import get_filtered_assets

from rich.console import Console
from rich.logging import RichHandler

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logger = logging.getLogger("app.periodic_prefilter_and_update")
logger.setLevel(logging.INFO)
logger.handlers.clear()
logger.addHandler(RichHandler(console=Console(stderr=True), show_path=False))
logger.propagate = False


# --- –§–æ–Ω–æ–≤–∏–π —Ç–∞—Å–∫: –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è fast_symbols —á–µ—Ä–µ–∑ prefilter ---
async def periodic_prefilter_and_update(
    cache, session, thresholds, interval=600, buffer=None, fetcher=None, lookback=500
):
    """
    –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–æ –≤–∏–∫–æ–Ω—É—î prefilter —Ç–∞ –æ–Ω–æ–≤–ª—é—î fast_symbols —É Redis.
    –î–æ–¥–∞—î preload —ñ—Å—Ç–æ—Ä—ñ—ó –¥–ª—è –Ω–æ–≤–∏—Ö –∞–∫—Ç–∏–≤—ñ–≤.
    """
    # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –Ω–∞–±—ñ—Ä —Å–∏–º–≤–æ–ª—ñ–≤
    initial_symbols = set(await cache.get_fast_symbols())
    prev_symbols = initial_symbols.copy()

    # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä—à–∏–º –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º (—â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É –∑ –ø–µ—Ä–≤–∏–Ω–Ω–∏–º –ø—Ä–µ—Ñ—ñ–ª—å—Ç—Ä–æ–º)
    await asyncio.sleep(interval)  # –ß–µ–∫–∞—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª (600 —Å–µ–∫)
    while True:
        try:
            logger.info("üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É fast_symbols —á–µ—Ä–µ–∑ prefilter...")
            fast_symbols = await get_filtered_assets(
                session=session,
                cache_handler=cache,
                thresholds=thresholds,
                dynamic=True,
            )

            if fast_symbols:
                fast_symbols = [s.lower() for s in fast_symbols]
                current_symbols = set(fast_symbols)
                await cache.set_fast_symbols(
                    fast_symbols, ttl=interval * 2
                )  # TTL 1200 —Å–µ–∫

                logger.info(
                    "Prefilter: %d —Å–∏–º–≤–æ–ª—ñ–≤ –∑–∞–ø–∏—Å–∞–Ω–æ —É Redis: %s",
                    len(fast_symbols),
                    fast_symbols[:5],
                )

                # --- preload –¥–ª—è –Ω–æ–≤–∏—Ö –∞–∫—Ç–∏–≤—ñ–≤ ---
                if buffer is not None and fetcher is not None:
                    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¢–Ü–õ–¨–ö–ò –Ω–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏
                    new_symbols = current_symbols - prev_symbols

                    # –î–æ–¥–∞—î–º–æ debug-–ª–æ–≥ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ —Å–∏–º–≤–æ–ª—ñ–≤
                    logger.debug(
                        f"–°—Ç–∞–Ω —Å–∏–º–≤–æ–ª—ñ–≤: "
                        f"–ü–æ—Ç–æ—á–Ω—ñ={len(current_symbols)}, "
                        f"–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ={len(prev_symbols)}, "
                        f"–ù–æ–≤—ñ={len(new_symbols)}"
                    )
                    if new_symbols:
                        new_symbols_list = list(new_symbols)
                        logger.info(
                            f"Preload —ñ—Å—Ç–æ—Ä—ñ—ó –¥–ª—è {len(new_symbols_list)} –Ω–æ–≤–∏—Ö –∞–∫—Ç–∏–≤—ñ–≤"
                        )
                        await preload_1m_history(
                            fetcher, new_symbols_list, buffer, lookback=lookback
                        )
                        await preload_daily_levels(fetcher, new_symbols_list, days=30)

                # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Å–∏–º–≤–æ–ª–∏
                prev_symbols = current_symbols
            else:
                logger.warning(
                    "Prefilter –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫, fast_symbols –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ."
                )
        except Exception as e:
            logger.warning("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è prefilter: %s", e)

        await asyncio.sleep(interval)  # 600 —Å–µ–∫


# --- Preload —ñ—Å—Ç–æ—Ä—ñ—ó –¥–ª—è Stage1 ---
async def preload_1m_history(fetcher, fast_symbols, buffer, lookback=50):
    """
    Preload —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö 1m-–±–∞—Ä—ñ–≤ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Å—Ç–∞—Ä—Ç—É Stage1.
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —â–æ lookback >= 12 (–º—ñ–Ω—ñ–º—É–º –¥–ª—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤ —Ç–∏–ø—É RSI/ATR).
    """
    if lookback < 12:
        logger.warning(
            "lookback (%d) –¥–ª—è 1m-–±–∞—Ä—ñ–≤ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∏–π. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º—ñ–Ω—ñ–º—É–º 12.",
            lookback,
        )
        lookback = 12

    logger.info(
        "Preload 1m: –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ %d 1m-–±–∞—Ä—ñ–≤ –¥–ª—è %d —Å–∏–º–≤–æ–ª—ñ–≤‚Ä¶",
        lookback,
        len(fast_symbols),
    )
    hist_data = await fetcher.get_data_batch(
        fast_symbols,
        interval="1m",
        limit=lookback,
        min_candles=lookback,
        show_progress=True,
        read_cache=False,
        write_cache=True,
    )

    # –î–æ–¥–∞—î–º–æ –±–∞—Ä–∏ –≤ RAMBuffer
    for sym, df in hist_data.items():
        for bar in df.to_dict("records"):
            ts = bar["timestamp"]
            if isinstance(ts, pd.Timestamp):
                bar["timestamp"] = int(ts.value // 1_000_000)
            else:
                bar["timestamp"] = int(ts)
            buffer.add(sym.lower(), "1m", bar)
    logger.info(
        "Preload 1m –∑–∞–≤–µ—Ä—à–µ–Ω–æ: —ñ—Å—Ç–æ—Ä—ñ—è –¥–æ–¥–∞–Ω–∞ –≤ RAMBuffer –¥–ª—è %d —Å–∏–º–≤–æ–ª—ñ–≤.",
        len(hist_data),
    )
    return hist_data


# --- Preload –¥–µ–Ω–Ω–∏—Ö –±–∞—Ä—ñ–≤ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤ ---
async def preload_daily_levels(fetcher, fast_symbols, days=30):
    """
    Preload –¥–µ–Ω–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏/–æ–ø–æ—Ä—É.
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —â–æ days >= 30.
    """
    if days < 30:
        logger.warning(
            "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ (%d) –¥–ª—è –¥–µ–Ω–Ω–∏—Ö –±–∞—Ä—ñ–≤ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∞. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º—ñ–Ω—ñ–º—É–º 30.",
            days,
        )
        days = 30

    logger.info(
        "Preload Daily: –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ %d –¥–µ–Ω–Ω–∏—Ö —Å–≤—ñ—á–æ–∫ –¥–ª—è %d —Å–∏–º–≤–æ–ª—ñ–≤‚Ä¶",
        days,
        len(fast_symbols),
    )
    daily_data = await fetcher.get_data_batch(
        fast_symbols,
        interval="1d",
        limit=days,
        min_candles=days,
        show_progress=False,
        read_cache=False,
        write_cache=False,
    )
    logger.info("Preload Daily –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è %d —Å–∏–º–≤–æ–ª—ñ–≤.", len(daily_data))
    return daily_data
