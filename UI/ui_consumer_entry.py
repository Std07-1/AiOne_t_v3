import asyncio
import logging
import os

from rich.console import Console
from rich.logging import RichHandler

from config.config import REDIS_CHANNEL_ASSET_STATE  # SIMPLE_UI_MODE fallback
from UI.ui_consumer import UIConsumer

# ‚îÄ‚îÄ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logger = logging.getLogger("ui_consumer_entry")
logger.setLevel(logging.INFO)
logger.handlers.clear()
logger.addHandler(RichHandler(console=Console(stderr=True), show_path=False))
logger.propagate = False


async def main():
    # –î–æ–¥–∞—î–º–æ low_atr_threshold —è–∫ —É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ UI_Consumer
    # –û—Ç—Ä–∏–º—É—î–º–æ SIMPLE_UI_MODE –¥–∏–Ω–∞–º—ñ—á–Ω–æ (fallback False –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑—ñ —Å—Ç–∞—Ä–∏–º–∏ –≤–µ—Ä—Å—ñ—è–º–∏)
    ui = UIConsumer(vol_z_threshold=2.5, low_atr_threshold=0.005)
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ UI Consumer...")

    logger.info(
        "–ö–æ—Ä–æ—Ç–∫–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è: \n"
        "Blocks: lowvol|htf|lowconf|OK = A|B|C|D \n"
        "A = blocked_alerts_lowvol (–Ω–∞–∫–æ–ø–∏—á–µ–Ω–æ)\n"
        "B = blocked_alerts_htf\n"
        "C = blocked_alerts_lowconf\n"
        "D = passed_alerts (ALERT, —â–æ –¥—ñ–π—à–ª–∏ –±–µ–∑ –¥–∞—É–Ω–≥—Ä–µ–π–¥—É)\n"
        "Downgraded: –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–ø–∞–¥–∫—ñ–≤, –∫–æ–ª–∏ –ø–µ—Ä–≤–∏–Ω–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è –±—É–ª–∞ –∑–º—ñ–Ω–µ–Ω–∞.\n"
        "Gen: –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ —Å–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ Stage2 —Ä–µ–∞–ª—å–Ω–æ –æ—Ç—Ä–∏–º–∞–≤ –ø–∞–∫–µ—Ç alert_signals (—Å–∫—ñ–ª—å–∫–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤ –æ–±—Ä–æ–±–ª–µ–Ω–æ)."
        "Skip: —Å–∫—ñ–ª—å–∫–∏ —Ü–∏–∫–ª—ñ–≤ –±–µ–∑ –∂–æ–¥–Ω–æ–≥–æ Stage1 ALERT."
    )
    await ui.redis_consumer(
        redis_url=(
            os.getenv("REDIS_URL")
            or f"redis://{os.getenv('REDIS_HOST','localhost')}:{os.getenv('REDIS_PORT','6379')}/0"
        ),
        channel=REDIS_CHANNEL_ASSET_STATE,
        refresh_rate=0.8,
        loading_delay=1.5,
        smooth_delay=0.05,
    )


if __name__ == "__main__":
    asyncio.run(main())
