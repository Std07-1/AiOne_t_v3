# trade_manager_updater.py
import logging
import asyncio
import pandas as pd
from stage3.trade_manager import TradeLifecycleManager
from stage1.asset_monitoring import AssetMonitorStage1
from data.ram_buffer import RAMBuffer

from rich.console import Console
from rich.logging import RichHandler

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logger = logging.getLogger("trade_manager_updater")
logger.setLevel(logging.INFO)
logger.handlers.clear()
logger.addHandler(RichHandler(console=Console(stderr=True), show_path=False))
logger.propagate = False


async def trade_manager_updater(
    trade_manager: TradeLifecycleManager,
    buffer: RAMBuffer,
    monitor: AssetMonitorStage1,
    timeframe: str = "1m",
    lookback: int = 20,
    interval_sec: int = 30,
):
    """
    –§–æ–Ω–æ–≤–∏–π —Ç–∞—Å–∫: –æ–Ω–æ–≤–ª—é—î –∞–∫—Ç–∏–≤–Ω—ñ —É–≥–æ–¥–∏,
    –±–µ—Ä–µ ATR/RSI/VOLUME —ñ–∑ Stage1.stats, –∞ –Ω–µ –∑ —Å–∏—Ä–∏—Ö –±–∞—Ä—ñ–≤,
    —ñ –≤–∏–≤–æ–¥–∏—Ç—å –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ active/closed.
    """
    while True:
        # 1) –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ —É–≥–æ–¥–∏
        active = await trade_manager.get_active_trades()
        for tr in active:
            sym = tr["symbol"]
            bars = buffer.get(sym, timeframe, lookback)
            if not bars or len(bars) < lookback:
                continue

            df = pd.DataFrame(bars)
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ AssetMonitorStage1 –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è stats
            stats = (
                await monitor.get_current_stats(sym, df)
                if hasattr(monitor, "get_current_stats")
                else {}
            )
            market_data = {
                "price": stats.get("current_price", 0),
                "atr": stats.get("atr", 0),
                "rsi": stats.get("rsi", 0),
                "volume": stats.get("volume_mean", 0),
                "context_break": stats.get("context_break", False),
            }
            await trade_manager.update_trade(tr["id"], market_data)

        # 2) –ü—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–≤–æ–¥–∏–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        active = await trade_manager.get_active_trades()
        closed = await trade_manager.get_closed_trades()
        logger.info(
            f"üü¢ Active trades: {len(active)}    üî¥ Closed trades: {len(closed)}"
        )

        await asyncio.sleep(interval_sec)
