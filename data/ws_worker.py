# data/ws_worker.py
# -*- coding: utf-8 -*-
"""
Binance Futures WebSocket ‚Üí Redis bridge –¥–ª—è AiOne_t
===================================================

–ü—Ä–∏–π–º–∞—î 1m-–±–∞—Ä –∑ Binance, –ø–∏—à–µ –≤ Redis (TTL=90—Å), –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ bar[x] ‚Äî —Ä–µ—Å–µ–º–ø–ª —É 1h,
–ø—É–±–ª—ñ–∫—É—î —á–µ—Ä–µ–∑ Pub/Sub. –°–∏–º–≤–æ–ª–∏ ‚Äî –∑ Redis selector (prefilter) –∞–±–æ –∑ ENV.
"""

import asyncio
import json
import logging
import os
from typing import Any, Dict, List, Optional, Set

import pandas as pd
import websockets
from rich.console import Console
from rich.logging import RichHandler

from .cache_handler import SimpleCacheHandler
from .raw_data import _df_to_bytes, _bytes_to_df
from .ram_buffer import RAMBuffer

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è/–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ ---
CACHE = SimpleCacheHandler(redis_url=os.getenv("REDIS_URL"))
PARTIAL_CHANNEL = "klines.1m.partial"
FINAL_CHANNEL = "klines.1h.update"
TTL_1M = 90
TTL_1H = 65 * 60
SELECTOR_KEY = "selector:active:stream"
SELECTOR_REFRESH_S = 30

STATIC_SYMBOLS = os.getenv("STREAM_SYMBOLS", "")
DEFAULT_SYMBOLS = [s.lower() for s in STATIC_SYMBOLS.split(",") if s] or ["btcusdt"]

# --- –õ–æ–≥—É–≤–∞–Ω–Ω—è ---
logger = logging.getLogger("ws_worker")
logger.setLevel(logging.WARNING)
logger.handlers.clear()
logger.addHandler(RichHandler(console=Console(stderr=True), show_path=False))
logger.propagate = False

logging.getLogger("websockets").setLevel(logging.WARNING)
logging.getLogger("websockets.client.protocol").setLevel(logging.WARNING)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ WS Worker ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


class WSWorker:
    """
    WebSocket-–≤–æ—Ä–∫–µ—Ä: —Å—Ç—Ä—ñ–º 1m-–±–∞—Ä—ñ–≤ Binance ‚Üí RAMBuffer (–¥–ª—è stage1) —ñ Redis (fallback).
    """

    def __init__(
        self,
        symbols: Optional[List[str]] = None,
        ram_buffer: Optional[RAMBuffer] = None,
        redis_cache: Optional[Any] = None,
    ):
        self._symbols: Set[str] = set(
            [s.lower() for s in symbols] if symbols else DEFAULT_SYMBOLS
        )
        self._ws_url: Optional[str] = None
        self._backoff: int = 3
        self._refresh_task: Optional[asyncio.Task] = None
        self._stop_event = asyncio.Event()
        self.buffer = ram_buffer if ram_buffer is not None else RAMBuffer(max_bars=120)
        self.cache = redis_cache if redis_cache is not None else CACHE

    async def _get_live_symbols(self) -> List[str]:
        """
        –û—Ç—Ä–∏–º—É—î whitelist —Å–∏–º–≤–æ–ª—ñ–≤ (prefilter —ñ–∑ Redis –∞–±–æ ENV).
        """
        data = await self.cache.get_fast_symbols()  # ‚Üê –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î self.cache!
        # –î–µ—Ñ–æ–ª—Ç ‚Äî —è–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—Ä–∏–π—à–ª–æ, –∞–±–æ —Ç–∏–ø –Ω–µ–≤—ñ–¥–æ–º–∏–π
        syms = []
        if isinstance(data, dict):
            syms = list(data.keys())
        elif isinstance(data, list):
            syms = data
        # Fallback —è–∫—â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π
        if not syms:
            logger.warning(
                "[WSWorker] selector:active:stream –ø—É—Å—Ç–∏–π –∞–±–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–∏–π, fallback btcusdt"
            )
            syms = DEFAULT_SYMBOLS
        if len(syms) < 3:
            logger.warning(
                "[WSWorker] –í–ê–ñ–õ–ò–í–û: –ö—ñ–ª—å–∫—ñ—Å—Ç—å symbols —É —Å—Ç—Ä—ñ–º—ñ –ø—ñ–¥–æ–∑—Ä—ñ–ª–æ –º–∞–ª–∞: %d (%s)",
                len(syms),
                syms,
            )
        logger.debug(
            "[WSWorker][_get_live_symbols] data type: %s, value: %s",
            type(data),
            str(data)[:200],
        )
        logger.debug("[WSWorker] –°–∏–º–≤–æ–ª–∏ –¥–ª—è —Å—Ç—Ä—ñ–º—É: %d (%s...)", len(syms), syms[:10])
        return syms

    def _build_ws_url(self, symbols: Set[str]) -> str:
        streams = "/".join(f"{s}@kline_1m" for s in sorted(symbols))
        return f"wss://fstream.binance.com/stream?streams={streams}"

    async def _store_minute(self, sym: str, ts: int, k: Dict[str, Any]) -> pd.DataFrame:
        """–û–Ω–æ–≤–ª—é—î 1m DataFrame –≤ Redis."""
        raw = await CACHE.fetch_from_cache(sym, "1m", prefix="candles", raw=True)
        df = (
            _bytes_to_df(raw)
            if raw
            else pd.DataFrame(columns=["open", "high", "low", "close", "volume"])
        )
        dt = pd.to_datetime(ts, unit="ms", utc=True)
        df.loc[dt] = [
            float(k["o"]),
            float(k["h"]),
            float(k["l"]),
            float(k["c"]),
            float(k["v"]),
        ]
        await CACHE.store_in_cache(
            sym, "1m", _df_to_bytes(df), ttl=TTL_1M, prefix="candles", raw=True
        )
        return df

    async def _on_final_candle(self, sym: str, df_1m: pd.DataFrame) -> None:
        """–ê–≥—Ä–µ–≥—É—î 1h-–±–∞—Ä, –∑–±–µ—Ä—ñ–≥–∞—î —É Redis, –ø—É–±–ª—ñ–∫—É—î –ø–æ–¥—ñ—é."""
        df_1h = (
            df_1m.resample("1h", label="right", closed="right")
            .agg(
                {
                    "open": "first",
                    "high": "max",
                    "low": "min",
                    "close": "last",
                    "volume": "sum",
                }
            )
            .dropna()
        )
        await CACHE.store_in_cache(
            sym, "1h", _df_to_bytes(df_1h), ttl=TTL_1H, prefix="candles", raw=True
        )
        await CACHE.client.publish(FINAL_CHANNEL, sym)
        logger.debug("[%s] 1h closed ‚Üí published %s", sym, FINAL_CHANNEL)

    async def _handle_kline(self, k: Dict[str, Any]) -> None:
        """
        –û–±—Ä–æ–±–∫–∞ WS kline:
        - –∑–±–µ—Ä—ñ–≥–∞—î 1m –≤ RAMBuffer (–æ–Ω–æ–≤–ª–µ–Ω–Ω—è bar –ø–æ timestamp, –±–µ–∑ –¥—É–±–ª—é–≤–∞–Ω–Ω—è),
        - –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ bar[x] ‚Äî –∞–≥—Ä–µ–≥—É—î —É 1h.
        """
        sym = k["s"].lower()
        ts = int(k["t"])
        tf = "1m"
        bar = {
            "open": float(k["o"]),
            "high": float(k["h"]),
            "low": float(k["l"]),
            "close": float(k["c"]),
            "volume": float(k["v"]),
            "timestamp": ts,
        }
        # –î–æ–¥–∞—î–º–æ/–æ–Ω–æ–≤–ª—é—î–º–æ –±–∞—Ä —É RAMBuffer (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–æ–≤–∏–π timestamp –∞–±–æ partial update)
        self.buffer.add(sym, tf, bar)
        # –õ–æ–≥—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –Ω–æ–≤–æ–º—É bar (x==True) –∞–±–æ –∑–º—ñ–Ω—ñ timestamp
        if k.get("x", False):
            logger.debug(
                "[WSWorker][heartbeat] FINAL bar —É RAMBuffer: %s (%d)", sym, ts
            )
        elif (
            self.buffer.data[sym][tf]
            and self.buffer.data[sym][tf][-1]["timestamp"] == ts
        ):
            logger.debug("[WSWorker][heartbeat] partial update %s (%d)", sym, ts)

        # –ó–∞–ø–∏—Å —É Redis (—è–∫ fallback —ñ –¥–ª—è stage2+)
        df_1m = await self._store_minute(sym, ts, k)
        await CACHE.client.publish(PARTIAL_CHANNEL, sym)
        if k.get("x"):
            await self._on_final_candle(sym, df_1m)

    async def _refresh_symbols(self, ws: websockets.WebSocketClientProtocol) -> None:
        """–§–æ–Ω–æ–≤–∏–π —Ç–∞—Å–∫: refresh whitelist —ñ —Ä–µ—Å–∞–±—Å–∫—Ä–∞–π–±."""
        while not self._stop_event.is_set():
            await asyncio.sleep(SELECTOR_REFRESH_S)
            try:
                new_syms = set(await self._get_live_symbols())
                if new_syms and new_syms != self._symbols:
                    await self._resubscribe(ws, new_syms)
            except Exception as e:
                logger.warning("Refresh symbols error: %s", e)

    async def _resubscribe(
        self, ws: websockets.WebSocketClientProtocol, new_syms: Set[str]
    ) -> None:
        """UNSUBSCRIBE/SUBSCRIBE WS-–∫–∞–Ω–∞–ª–∏ –±–µ–∑ reconnect."""
        old_syms = self._symbols
        to_unsub = [f"{s}@kline_1m" for s in old_syms - new_syms]
        to_sub = [f"{s}@kline_1m" for s in new_syms - old_syms]
        rid = 1
        if to_unsub:
            await ws.send(
                json.dumps({"method": "UNSUBSCRIBE", "params": to_unsub, "id": rid})
            )
            rid += 1
        if to_sub:
            await ws.send(
                json.dumps({"method": "SUBSCRIBE", "params": to_sub, "id": rid})
            )
            logger.debug(
                "WS re-subscribed +%d -%d total=%d",
                len(to_sub),
                len(to_unsub),
                len(new_syms),
            )
        self._symbols = new_syms

    async def consume(self) -> None:
        """–ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª: –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è, –æ–±—Ä–æ–±–∫–∞ WS, reconnect/backoff."""
        while not self._stop_event.is_set():
            try:
                # 1. –ó–∞–≤–∂–¥–∏ –≤–∏–∑–Ω–∞—á–∞—î–º–æ syms, fallback –Ω–∞ {"btcusdt"}
                syms = set(await self._get_live_symbols() or [])
                if not syms:
                    syms = {"btcusdt"}
                # 2. –û–Ω–æ–≤–ª—é—î–º–æ ws_url –ª–∏—à–µ —è–∫—â–æ —Å–∏–º–≤–æ–ª–∏ –∑–º—ñ–Ω–∏–ª–∏—Å—å
                if syms != self._symbols or not self._ws_url:
                    self._symbols = syms
                    self._ws_url = self._build_ws_url(self._symbols)

                logger.info(
                    "üîÑ –ó–∞–ø—É—Å–∫ WS (%d symbols): %s",
                    len(self._symbols),
                    list(self._symbols)[:5],
                )
                async with websockets.connect(self._ws_url, ping_interval=20) as ws:
                    logger.debug("WS connected (%d streams)‚Ä¶", len(self._symbols))
                    self._backoff = 3
                    self._stop_event.clear()
                    self._refresh_task = asyncio.create_task(self._refresh_symbols(ws))
                    async for msg in ws:
                        try:
                            data = json.loads(msg).get("data", {}).get("k")
                            if data:
                                await self._handle_kline(data)
                        except Exception as e:
                            try:
                                msg_for_log = msg
                                if isinstance(msg, dict):
                                    msg_for_log = json.dumps(msg, default=str)[:80]
                                logger.debug(
                                    "Bad WS message: %s‚Ä¶ (%s)", str(msg)[:200], e
                                )
                            except Exception as e2:
                                logger.debug("Bad WS message: <unserializable> (%s)", e)
            except Exception as exc:
                logger.warning("WS error: %s ‚Üí reconnect in %ds", exc, self._backoff)
                await asyncio.sleep(self._backoff)
                self._backoff = min(self._backoff * 2, 30)
            finally:
                if self._refresh_task:
                    self._refresh_task.cancel()

    async def stop(self) -> None:
        """–ó—É–ø–∏–Ω—è—î –≤–æ—Ä–∫–µ—Ä —ñ –≤—Å—ñ —Ñ–æ–Ω–æ–≤—ñ —Ç–∞—Å–∫–∏."""
        self._stop_event.set()
        if self._refresh_task:
            self._refresh_task.cancel()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

if __name__ == "__main__":
    worker = WSWorker()
    try:
        asyncio.run(worker.consume())
    except KeyboardInterrupt:
        logger.info("WSWorker stopped by user")
    except Exception as e:
        logger.error("Fatal error: %s", e, exc_info=True)
